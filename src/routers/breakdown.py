from aiogram import Router, F
import logging

logger = logging.getLogger(__name__)
from aiogram.types import Message, Contact
from aiogram.fsm.context import FSMContext
from config import config
from components.photo_upload import PhotoUploadComponent

from models.dialog import DialogManager
from models.user import UserManager
from services.message_service import MessageService
from states.breakdown import BreakdownStates
from utils.validators import validate_phone
from utils.messages import (
	REQUEST_NAME, REQUEST_PRINTER_MODEL, REQUEST_ISSUE_DESCRIPTION,
	REQUEST_PHOTO, ISSUE_CONFIRMED, PHOTO_ADDED, REQUEST_COMPLETED,
	REVIEW_REQUEST, REQUEST_PHONE
)
from utils.keyboards import (
	remove_keyboard, get_profile_name_keyboard,
	get_printer_model_keyboard, get_next_keyboard,
	get_confirmation_keyboard, get_phone_keyboard,
	get_main_keyboard
)

router = Router(name="breakdown")

@router.message(F.text == "üîß –ü–æ–ª–æ–º–∫–∞")
async def start_breakdown(
	message: Message,
	state: FSMContext,
	dialog_manager: DialogManager,
	user_manager: UserManager,
	message_service: MessageService
) -> None:
	"""–ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É –ø—Ä–æ –ø–æ–ª–æ–º–∫—É"""
	user = message.from_user
	
	# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	user_manager.get_user(
		user_id=user.id,
		first_name=user.first_name,
		last_name=user.last_name or ""
	)
	
	# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥—ñ–∞–ª–æ–≥—É
	dialog = dialog_manager.get_dialog(user.id)
	dialog.current_step = "initial"
	
	# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
	await state.set_state(BreakdownStates.waiting_order)
	await message_service.send_message(
		chat_id=message.chat.id,
		text="–í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–∑–¥—ñ–ª 'üîß –ü–æ–ª–æ–º–∫–∞'. –î–ª—è –ø–æ—á–∞—Ç–∫—É –¥—ñ–∞–ª–æ–≥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥–∞—Ç–∏ –¥–µ—è–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.\n\nüî¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç—ñ bambulab.net.ua, –∑–∞ —è–∫–∏–º –≤–∏ –∫—É–ø—É–≤–∞–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä (—è–∫—â–æ –∫—É–ø—É–≤–∞–ª–∏ –Ω–µ —É –Ω–∞—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞—î')",
		keyboard=remove_keyboard  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≤—Ä–µ–º—è –¥–∏–∞–ª–æ–≥–∞
	)


@router.message(BreakdownStates.waiting_order)
async def process_order(
	message: Message,
	state: FSMContext,
	dialog_manager: DialogManager,
	message_service: MessageService
) -> None:
	"""–û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
	user_id = message.from_user.id
	order_number = message.text.lower()
	
	if order_number == "–Ω–µ–º–∞—î":
		# –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∫—É–ø—É–≤–∞–≤ —É –Ω–∞—Å
		dialog_manager.update_dialog(
			user_id,
			order_number=None,
			current_step='name_input'
		)
		
		await message_service.send_message(
			chat_id=message.chat.id,
			text="‚úÖ –ó–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∏, —â–æ –≤–∏ –∫—É–ø—É–≤–∞–ª–∏ –Ω–µ —É –Ω–∞—Å"
		)
		
		# –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
		await state.set_state(BreakdownStates.waiting_name)
		await message_service.send_message(
			chat_id=message.chat.id,
			text=REQUEST_NAME,
			keyboard=get_profile_name_keyboard()
		)
	else:
		# –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
		dialog_manager.update_dialog(
			user_id,
			order_number=order_number,
			current_step='printer_model_input'
		)
		
		await message_service.send_message(
			chat_id=message.chat.id,
			text=f"‚úÖ –ó–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_number}"
		)
		
		# –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
		await state.set_state(BreakdownStates.waiting_printer_model)
		await message_service.send_message(
			chat_id=message.chat.id,
			text=REQUEST_PRINTER_MODEL,
			keyboard=get_printer_model_keyboard()
		)


@router.message(BreakdownStates.waiting_name, F.text == "üë§ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ–º'—è –∑ –ø—Ä–æ—Ñ—ñ–ª—é")
async def use_profile_name(
	message: Message,
	state: FSMContext,
	dialog_manager: DialogManager,
	message_service: MessageService
) -> None:
	"""–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram"""
	user = message.from_user
	user_id = user.id
	
	# –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
	full_name = f"{user.first_name}"
	if user.last_name:
		full_name += f" {user.last_name}"
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –¥–∏–∞–ª–æ–≥–µ
	dialog_manager.update_dialog(
		user_id,
		user_name=full_name,
		current_step='phone_input'
	)
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	await message_service.send_message(
		chat_id=message.chat.id,
		text=f"‚úÖ –ó–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∏ –≤–∞—à–µ —ñ–º'—è: {full_name}"
	)
	
	# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	await state.set_state(BreakdownStates.waiting_phone)
	await message_service.send_message(
		chat_id=message.chat.id,
		text=REQUEST_PHONE,
		keyboard=get_phone_keyboard()
	)

@router.message(BreakdownStates.waiting_name)
async def process_name(
	message: Message,
	state: FSMContext,
	dialog_manager: DialogManager,
	message_service: MessageService
) -> None:
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
	user_id = message.from_user.id
	name = message.text
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –¥–∏–∞–ª–æ–≥–µ
	dialog_manager.update_dialog(
		user_id,
		user_name=name,
		current_step='phone_input'
	)
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É
	await message_service.send_message(
		chat_id=message.chat.id,
		text=f"‚úÖ –ó–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∏ –≤–∞—à–µ —ñ–º'—è: {name}"
	)
	
	await state.set_state(BreakdownStates.waiting_phone)
	await message_service.send_message(
		chat_id=message.chat.id,
		text=REQUEST_PHONE,
		keyboard=get_phone_keyboard()
	)

@router.message(BreakdownStates.waiting_phone, F.contact)
async def process_phone_from_profile(
	message: Message,
	state: FSMContext,
	dialog_manager: DialogManager,
	message_service: MessageService
) -> None:
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
	user_id = message.from_user.id
	contact = message.contact
	
	if not contact or not contact.phone_number:
		await message_service.send_message(
			chat_id=message.chat.id,
			text="–ß–µ—Ä–µ–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É",
			keyboard=remove_keyboard
		)
		return
	
	phone = f"+{contact.phone_number}" if not contact.phone_number.startswith('+') else contact.phone_number
	is_valid, validated_phone = validate_phone(phone)
	
	if not is_valid:
		await message_service.send_message(
			chat_id=message.chat.id,
			text=validated_phone,
			keyboard=remove_keyboard
		)
		return
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
	dialog_manager.update_dialog(
		user_id,
		phone_number=validated_phone,
		current_step='printer_model_input'
	)
	
	await message_service.send_message(
		chat_id=message.chat.id,
		text=f"‚úÖ –ó–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {validated_phone}"
	)
	
	await state.set_state(BreakdownStates.waiting_printer_model)
	await message_service.send_message(
		chat_id=message.chat.id,
		text=REQUEST_PRINTER_MODEL,
		keyboard=get_printer_model_keyboard()
	)

@router.message(BreakdownStates.waiting_phone)
async def process_phone(
	message: Message,
	state: FSMContext,
	dialog_manager: DialogManager,
	message_service: MessageService
) -> None:
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
	user_id = message.from_user.id
	phone = message.text
	
	is_valid, result = validate_phone(phone)
	if not is_valid:
		await message_service.send_message(
			chat_id=message.chat.id,
			text=result,
			keyboard=get_phone_keyboard()
		)
		return
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
	dialog_manager.update_dialog(
		user_id,
		phone_number=result,
		current_step='printer_model_input'
	)
	
	await message_service.send_message(
		chat_id=message.chat.id,
		text=f"‚úÖ –ó–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {result}"
	)
	
	await state.set_state(BreakdownStates.waiting_printer_model)
	await message_service.send_message(
		chat_id=message.chat.id,
		text=REQUEST_PRINTER_MODEL,
		keyboard=get_printer_model_keyboard()
	)

@router.message(BreakdownStates.waiting_printer_model)
async def process_printer_model(
	message: Message,
	state: FSMContext,
	dialog_manager: DialogManager,
	message_service: MessageService
) -> None:
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞"""
	user_id = message.from_user.id
	model = message.text
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
	dialog_manager.update_dialog(
		user_id,
		printer_model=model,
		current_step='issue_description'
	)
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	await message_service.send_message(
		chat_id=message.chat.id,
		text=f"‚úÖ –ó–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∏ –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä—É: {model}",
		keyboard=remove_keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º remove_keyboard –≤–º–µ—Å—Ç–æ get_main_keyboard
	)
	
	# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
	await state.set_state(BreakdownStates.waiting_description)
	await message_service.send_message(
		chat_id=message.chat.id,
		text=REQUEST_ISSUE_DESCRIPTION
	)


@router.message(BreakdownStates.waiting_description)
async def process_description(
	message: Message,
	state: FSMContext,
	dialog_manager: DialogManager,
	message_service: MessageService
) -> None:
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
	user_id = message.from_user.id
	description = message.text
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
	dialog_manager.update_dialog(
		user_id,
		issue_description=description,
		current_step='waiting_media'
	)
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	await message_service.send_message(
		chat_id=message.chat.id,
		text=f"{ISSUE_CONFIRMED}:\n{description}"
	)
	
	# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
	await state.set_state(BreakdownStates.waiting_media)
	await message_service.send_message(
		chat_id=message.chat.id,
		text=REQUEST_PHOTO,
		keyboard=get_next_keyboard()
	)

@router.message(BreakdownStates.waiting_media, F.text == "–î–∞–ª—ñ")
async def finish_photos(
	message: Message,
	state: FSMContext,
	dialog_manager: DialogManager,
	message_service: MessageService
) -> None:
	"""–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ"""
	user_id = message.from_user.id
	dialog = dialog_manager.get_dialog(user_id)
	
	# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	dialog.current_step = 'confirmation'
	await state.set_state(BreakdownStates.confirmation)
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
	await message_service.send_message(
		chat_id=message.chat.id,
		text=REVIEW_REQUEST + "\n\n" + dialog.get_summary(),
		keyboard=get_confirmation_keyboard()
	)

@router.message(BreakdownStates.confirmation, F.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é")
async def confirm_request(
	message: Message,
	state: FSMContext,
	dialog_manager: DialogManager,
	message_service: MessageService
) -> None:
	"""–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
	user_id = message.from_user.id
	dialog = dialog_manager.get_dialog(user_id)
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	await message_service.send_message(
		chat_id=message.chat.id,
		text=REQUEST_COMPLETED
	)
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–Ω–∂–µ–Ω–µ—Ä—É
	engineer_id = config.ENGINEER_TELEGRAM_ID
	await message_service.send_message(
		chat_id=engineer_id,
		text=f"üÜï –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!\n\n{dialog.get_summary()}"
	)
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏–Ω–∂–µ–Ω–µ—Ä—É
	if hasattr(dialog, 'photo_files') and dialog.photo_files:
		for photo_id in dialog.photo_files:
			try:
				await message_service.send_photo(
					chat_id=engineer_id,
					photo=photo_id
				)
			except Exception as e:
				logger.error(f"Error sending photo to engineer: {e}")
	
	if hasattr(dialog, 'video_files') and dialog.video_files:
		for video_id in dialog.video_files:
			try:
				await message_service.send_video(
					chat_id=engineer_id,
					video=video_id
				)
			except Exception as e:
				logger.error(f"Error sending video to engineer: {e}")
	
	# –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∏–∞–ª–æ–≥
	await state.clear()
	dialog_manager.clear_dialog(user_id)  # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	await message_service.send_message(
		chat_id=message.chat.id,
		text="–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–µ–º—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:",
		keyboard=get_main_keyboard()
	)


@router.message(BreakdownStates.confirmation, F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_request(
	message: Message,
	state: FSMContext,
	dialog_manager: DialogManager,
	message_service: MessageService
) -> None:
	"""–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏"""
	await message_service.send_message(
		chat_id=message.chat.id,
		text="‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
		keyboard=remove_keyboard
	)
	# –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	await state.clear()


@router.message(BreakdownStates.waiting_media, F.photo | F.video)
async def process_media(
	message: Message,
	state: FSMContext,
	dialog_manager: DialogManager,
	message_service: MessageService
) -> None:
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
	photo_upload = PhotoUploadComponent(dialog_manager, message_service)
	await photo_upload.process_input(message)



