from dataclasses import dataclass
from typing import Optional, List
from datetime import datetime

@dataclass
class DialogState:
	"""
	–ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –¥—ñ–∞–ª–æ–≥—É
	"""
	user_id: int
	order_number: Optional[str] = None
	user_name: Optional[str] = None  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∏–º–µ–Ω–∏
	phone_number: Optional[str] = None
	issue_description: Optional[str] = None
	printer_model: Optional[str] = None
	photo_files: List[str] = None
	video_files: List[str] = None
	current_step: str = "initial"
	started_at: datetime = datetime.now()
	completed_at: Optional[datetime] = None
	temp_message_ids: list[int] = None  # –î–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
	
	def __post_init__(self):
		"""–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—É"""
		self.temp_message_ids = [] if self.temp_message_ids is None else self.temp_message_ids
		self.photo_files = [] if self.photo_files is None else self.photo_files
		self.video_files = [] if self.video_files is None else self.video_files
		
	def get_summary(self) -> str:
		"""–§–æ—Ä–º—É—î –∑–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –∑–∞—è–≤–∫–∏"""
		summary_parts = []
		
		if self.order_number:
			summary_parts.append(f"üìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {self.order_number}")
		else:
			summary_parts.append("üìë –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: –ö—É–ø—É–≤–∞–ª–∏ –Ω–µ —É –Ω–∞—Å")
			
		if self.user_name:
			summary_parts.append(f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞: {self.user_name}")
			
		if self.phone_number:
			summary_parts.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {self.phone_number}")
			
		if self.printer_model:
			summary_parts.append(f"üñ® –ú–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {self.printer_model}")
			
		if self.issue_description:
			summary_parts.append(f"‚ùóÔ∏è –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏:\n{self.issue_description}")
			
		# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö
		if self.photo_files or self.video_files:
			media_count = len(self.photo_files) + len(self.video_files)
			summary_parts.append(f"üìé –î–æ–¥–∞–Ω–æ –º–µ–¥—ñ–∞—Ñ–∞–π–ª—ñ–≤: {media_count}")
			
		return "\n\n".join(summary_parts)


	
class DialogManager:
	"""
	–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å—Ç–∞–Ω–æ–º –¥—ñ–∞–ª–æ–≥—É
	"""
	def __init__(self):
		self._dialogs: dict[int, DialogState] = {}
		
	def get_dialog(self, user_id: int) -> DialogState:
		"""–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
		if user_id not in self._dialogs:
			self._dialogs[user_id] = DialogState(user_id=user_id)
		return self._dialogs[user_id]
	
	def update_dialog(self, user_id: int, **kwargs) -> None:
		"""–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –¥—ñ–∞–ª–æ–≥—É"""
		dialog = self.get_dialog(user_id)
		for key, value in kwargs.items():
			setattr(dialog, key, value)
			
	def complete_dialog(self, user_id: int) -> None:
		"""–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥"""
		dialog = self.get_dialog(user_id)
		dialog.completed_at = datetime.now()
		
	def clear_dialog(self, user_id: int) -> None:
		"""–û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ –¥—ñ–∞–ª–æ–≥—É"""
		if user_id in self._dialogs:
			del self._dialogs[user_id]