# service_bot/src/handlers/utils.py
from telegram import Update
from telegram.ext import ContextTypes
from typing import Union
from telegram import ReplyKeyboardMarkup
from states.form_states import FormStates
from keyboards.reply import get_printer_models_keyboard
from datetime import datetime
import pytz
from config import ENGINEER_TELEGRAM_ID

async def format_service_request(data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ –∑–∞—è–≤–∫–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω–∂–µ–Ω–µ—Ä—É.
    
    Args:
        data (dict): –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –∑–∞—è–≤–∫–∏
    
    Returns:
        str: –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    """
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –∫–∏—ó–≤—Å—å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—ñ
    kyiv_tz = pytz.timezone('Europe/Kiev')
    current_time = datetime.now(kyiv_tz).strftime("%Y-%m-%d %H:%M:%S")
    
    return f"""
üÜï –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤—ñ—Å

‚è∞ –î–∞—Ç–∞ —Ç–∞ —á–∞—Å: {current_time} (–ö–∏—ó–≤)

üë§ –ö–ª—ñ—î–Ω—Ç: {data.get('name')}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}
üî¢ –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {data.get('order_number', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}

üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä: {data.get('printer_model')}
üé® –ü–ª–∞—Å—Ç–∏–∫: {data.get('plastic_type')}

‚ùó –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏:
{data.get('description')}

üìé –§–æ—Ç–æ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—é—Ç—å—Å—è –æ–∫—Ä–µ–º–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
"""

async def send_to_engineer(update: Update, text: str) -> None:
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω–∂–µ–Ω–µ—Ä—É —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É.
    
    Args:
        update (Update): –û–±'—î–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Telegram
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    """
    bot = update.get_bot()
    await bot.send_message(
        chat_id=ENGINEER_TELEGRAM_ID,
        text=text,
        parse_mode='HTML'
    )

async def validate_phone(phone: str) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    
    Args:
        phone (str): –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    
    Returns:
        bool: True —è–∫—â–æ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π, False —è–∫—â–æ –Ω—ñ
    """
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä
    cleaned_phone = ''.join(filter(str.isdigit, phone))
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 380
    return len(cleaned_phone) == 12 and cleaned_phone.startswith('380')

async def handle_back_button(update: Update, context: ContextTypes.DEFAULT_TYPE, current_state: FormStates) -> FormStates:
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'.
    """
    state_flow = {
        FormStates.PHONE: (FormStates.NAME, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ –ü–Ü–ë:"),
        FormStates.ORDER_NUMBER: (FormStates.PHONE, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"),
        FormStates.PRINTER_MODEL: (FormStates.ORDER_NUMBER, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"),
        FormStates.PLASTIC_TYPE: (FormStates.PRINTER_MODEL, "–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –≤–∞—à–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞:"),
        FormStates.DESCRIPTION: (FormStates.PLASTIC_TYPE, "–í–∫–∞–∂—ñ—Ç—å —Ç–∏–ø —Ç–∞ –±—Ä–µ–Ω–¥ –ø–ª–∞—Å—Ç–∏–∫—É:"),
        FormStates.PHOTOS: (FormStates.DESCRIPTION, "–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É:"),
        FormStates.SETTINGS: (FormStates.PHOTOS, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º–∏:"),
    }

    if current_state in state_flow:
        prev_state, message = state_flow[current_state]
        await update.message.reply_text(
            message,
            reply_markup=get_keyboard_for_state(prev_state)
        )
        return prev_state
    
    return current_state

def get_keyboard_for_state(state: FormStates) -> Union[ReplyKeyboardMarkup, None]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞–Ω—É.
    """
    if state == FormStates.PRINTER_MODEL:
        return get_printer_models_keyboard()
    # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è —ñ–Ω—à–∏—Ö —Å—Ç–∞–Ω—ñ–≤ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
    return None