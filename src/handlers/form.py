from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from .utils import format_service_request
import logging
from keyboards.reply import (
    get_start_keyboard,
    get_printer_models_keyboard,
    get_plastic_types_keyboard,
    remove_keyboard
)
from config import ENGINEER_TELEGRAM_ID

logger = logging.getLogger(__name__)

from states.form_states import FormStates
from .utils import format_service_request, send_to_engineer, validate_phone

async def start_form(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FormStates:
    """
    –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏.
    –ó–∞–ø–∏—Ç—É—î –ü–Ü–ë –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∏
    context.user_data['form_data'] = {}
    
    await update.message.reply_text(
        "üìù –ü–æ—á–Ω–µ–º–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏!\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ –ü–Ü–ë:",
        reply_markup=remove_keyboard()
    )
    return FormStates.NAME

async def process_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FormStates:
    """
    –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –ü–Ü–ë —Ç–∞ –∑–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    """
    name = update.message.text
    if len(name.split()) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ –ü–Ü–ë (–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ):"
        )
        return FormStates.NAME
    
    context.user_data['form_data']['name'] = name
    
    await update.message.reply_text(
        "üì± –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "+380XXXXXXXXX –∞–±–æ 380XXXXXXXXX"
    )
    return FormStates.PHONE

async def process_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FormStates:
    """
    –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –∑–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    """
    phone = update.message.text
    
    if not validate_phone(phone):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
            "+380XXXXXXXXX –∞–±–æ 380XXXXXXXXX"
        )
        return FormStates.PHONE
    
    context.user_data['form_data']['phone'] = phone
    
    await update.message.reply_text(
        "üî¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∑–∞ —è–∫–∏–º –≤–∏ –∫—É–ø—É–≤–∞–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä "
        "(—è–∫—â–æ –∫—É–ø—É–≤–∞–ª–∏ –Ω–µ —É –Ω–∞—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞—î'):"
    )
    return FormStates.ORDER_NUMBER

async def process_order_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FormStates:
    """
    –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –ø—Ä–∏–Ω—Ç–µ—Ä–∞.
    """
    order_number = update.message.text
    context.user_data['form_data']['order_number'] = order_number
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    await update.message.reply_text(
        "üñ®Ô∏è –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –≤–∞—à–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞:",
        reply_markup=get_printer_models_keyboard()
    )
    return FormStates.PRINTER_MODEL  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –ø—Ä–∏–Ω—Ç–µ—Ä–∞, –∞ –Ω–µ –ø–ª–∞—Å—Ç–∏–∫—É

async def process_printer_model(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FormStates:
    """
    –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–∏–Ω—Ç–µ—Ä–∞ —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –ø–ª–∞—Å—Ç–∏–∫—É.
    """
    printer_model = update.message.text
    
    valid_models = [
        "X1C", "X1C Combo", "X1E",
        "P1P", "P1S", "P1S Combo",
        "A1", "A1 Combo", "A1 mini", "A1 mini Combo",
        "–Ü–Ω—à–∞ –º–æ–¥–µ–ª—å"
    ]
    
    if printer_model not in valid_models:
        await update.message.reply_text(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –Ω–∏–∂—á–µ:",
            reply_markup=get_printer_models_keyboard()
        )
        return FormStates.PRINTER_MODEL  # –ó–∞–ª–∏—à–∞—î–º–æ—Å—å –≤ —Å—Ç–∞–Ω—ñ –≤–∏–±–æ—Ä—É –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    context.user_data['form_data']['printer_model'] = printer_model
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –ø–ª–∞—Å—Ç–∏–∫—É
    await update.message.reply_text(
        "üé® –í–∫–∞–∂—ñ—Ç—å —Ç–∏–ø —Ç–∞ –±—Ä–µ–Ω–¥ –ø–ª–∞—Å—Ç–∏–∫—É, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ:",
        reply_markup=get_plastic_types_keyboard()
    )
    return FormStates.PLASTIC_TYPE  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –≤–∏–±–æ—Ä—É –ø–ª–∞—Å—Ç–∏–∫—É

# –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ—ó –º–æ–¥–µ–ª—ñ
async def process_custom_printer_model(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FormStates:
    """
    –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –º–æ–¥–µ–ª—ñ –ø—Ä–∏–Ω—Ç–µ—Ä–∞.
    """
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await handle_back_button(update, context, FormStates.CUSTOM_PRINTER_MODEL)
        
    printer_model = update.message.text
    context.user_data['form_data']['printer_model'] = f"–Ü–Ω—à–∞ –º–æ–¥–µ–ª—å: {printer_model}"
    
    await update.message.reply_text(
        "üé® –í–∫–∞–∂—ñ—Ç—å —Ç–∏–ø —Ç–∞ –±—Ä–µ–Ω–¥ –ø–ª–∞—Å—Ç–∏–∫—É, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ:",
        reply_markup=remove_keyboard()
    )
    return FormStates.PLASTIC_TYPE

async def process_plastic_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FormStates:
    """
    –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–ª–∞—Å—Ç–∏–∫—É —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –æ–ø–∏—Å—É –ø—Ä–æ–±–ª–µ–º–∏.
    """
    plastic_type = update.message.text
    valid_plastics = [
        "BambuLab PLA", "PLA —ñ–Ω—à–∏–π –±—Ä–µ–Ω–¥",
        "BambuLab PETG", "PETG —ñ–Ω—à–∏–π –±—Ä–µ–Ω–¥",
        "BambuLab TPU", "TPU —ñ–Ω—à–∏–π –±—Ä–µ–Ω–¥",
        "BambuLab ABS", "ABS —ñ–Ω—à–∏–π –±—Ä–µ–Ω–¥",
        "—ñ–Ω—à–∏–π —Ç–∏–ø –Ω–∞–ø–∏—à—É —É –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
    ]
    
    if plastic_type not in valid_plastics:
        await update.message.reply_text(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–ª–∞—Å—Ç–∏–∫—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –Ω–∏–∂—á–µ:",
            reply_markup=get_plastic_types_keyboard()
        )
        return FormStates.PLASTIC_TYPE  # –ó–∞–ª–∏—à–∞—î–º–æ—Å—å –≤ —Å—Ç–∞–Ω—ñ –≤–∏–±–æ—Ä—É –ø–ª–∞—Å—Ç–∏–∫—É

    if plastic_type == "—ñ–Ω—à–∏–π —Ç–∏–ø –Ω–∞–ø–∏—à—É —É –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ":
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–∏–ø —Ç–∞ –±—Ä–µ–Ω–¥ –ø–ª–∞—Å—Ç–∏–∫—É:",
            reply_markup=remove_keyboard()
        )
        return FormStates.PLASTIC_TYPE  # –ó–∞–ª–∏—à–∞—î–º–æ—Å—å –≤ —Å—Ç–∞–Ω—ñ –≤–∏–±–æ—Ä—É –ø–ª–∞—Å—Ç–∏–∫—É
        
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø –ø–ª–∞—Å—Ç–∏–∫—É
    context.user_data['form_data']['plastic_type'] = plastic_type if plastic_type != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏" else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ–ø–∏—Å—É –ø—Ä–æ–±–ª–µ–º–∏
    await update.message.reply_text(
        "‚ùó –û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –∑ —è–∫–æ—é –≤–∏ –∑—ñ—Ç–∫–Ω—É–ª–∏—Å—è:\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ —è–∫–æ–º–æ–≥–∞ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.",
        reply_markup=remove_keyboard()
    )
    return FormStates.DESCRIPTION  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –æ–ø–∏—Å—É –ø—Ä–æ–±–ª–µ–º–∏

async def process_custom_plastic_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FormStates:
    """
    –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Ç–∏–ø—É –ø–ª–∞—Å—Ç–∏–∫—É.
    """
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await handle_back_button(update, context, FormStates.CUSTOM_PLASTIC_TYPE)
        
    plastic_type = update.message.text
    context.user_data['form_data']['plastic_type'] = f"–Ü–Ω—à–∏–π —Ç–∏–ø: {plastic_type}"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ–ø–∏—Å—É –ø—Ä–æ–±–ª–µ–º–∏
    await update.message.reply_text(
        "‚ùó –û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –∑ —è–∫–æ—é –≤–∏ –∑—ñ—Ç–∫–Ω—É–ª–∏—Å—è:\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ —è–∫–æ–º–æ–≥–∞ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.",
        reply_markup=remove_keyboard()
    )
    return FormStates.DESCRIPTION

async def process_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FormStates:
    """
    –û–±—Ä–æ–±–∫–∞ –æ–ø–∏—Å—É –ø—Ä–æ–±–ª–µ–º–∏ —Ç–∞ –∑–∞–ø–∏—Ç —Ñ–æ—Ç–æ.
    """
    try:
        if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            return await handle_back_button(update, context, FormStates.DESCRIPTION)
            
        description = update.message.text
        if len(description) < 10:
            await update.message.reply_text(
                "‚ö†Ô∏è –û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ:"
            )
            return FormStates.DESCRIPTION
        
        context.user_data['form_data']['description'] = description
        
        await update.message.reply_text(
            "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ, —è–∫—ñ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—é—Ç—å –ø—Ä–æ–±–ª–µ–º—É "
            "(–¥–æ 10 —Ñ–æ—Ç–æ).\n\n"
            "–ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'",
            reply_markup=ReplyKeyboardMarkup([["–î–∞–ª—ñ"]], resize_keyboard=True)
        )
        context.user_data['photos'] = []
        return FormStates.PHOTOS
        
    except Exception as e:
        logger.error(f"Error in process_description: {str(e)}")
        await update.message.reply_text(
            "üò¢ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return ConversationHandler.END

async def process_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FormStates:
    """
    –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º–∏.
    """
    if update.message.photo:
        if not context.user_data.get('photos'):
            context.user_data['photos'] = []
            
        if len(context.user_data['photos']) >= 10:
            await update.message.reply_text(
                "‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ (10)\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è",
                reply_markup=ReplyKeyboardMarkup([["–î–∞–ª—ñ", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]], resize_keyboard=True)
            )
            return FormStates.PHOTOS
            
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ
        file_id = update.message.photo[-1].file_id
        context.user_data['photos'].append(file_id)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
        await update.message.reply_text(
            f"‚úÖ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ ({len(context.user_data['photos'])}/10)\n"
            "–ú–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'",
            reply_markup=ReplyKeyboardMarkup([["–î–∞–ª—ñ", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]], resize_keyboard=True)
        )
        return FormStates.PHOTOS
        
    if update.message.text in ["–î–∞–ª—ñ", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]:
        await update.message.reply_text(
            "üì∏ –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Bambu Studio.\n"
            "–ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'\n"
            "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', —è–∫—â–æ –Ω–µ –º–∞—î—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤",
            reply_markup=ReplyKeyboardMarkup([["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]], resize_keyboard=True)
        )
        context.user_data['settings_photos'] = []
        return FormStates.SETTINGS
    
    if not context.user_data.get('photos'):
        context.user_data['photos'] = []
        await update.message.reply_text(
            "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ, —è–∫—ñ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—é—Ç—å –ø—Ä–æ–±–ª–µ–º—É (–¥–æ 10 —Ñ–æ—Ç–æ).\n"
            "–ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'\n"
            "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', —è–∫—â–æ –Ω–µ –º–∞—î—Ç–µ —Ñ–æ—Ç–æ",
            reply_markup=ReplyKeyboardMarkup([["–î–∞–ª—ñ", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]], resize_keyboard=True)
        )
    
    return FormStates.PHOTOS

async def process_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> FormStates:
    """
    –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.
    """
    if update.message.photo:
        if not context.user_data.get('settings_photos'):
            context.user_data['settings_photos'] = []
            
        if len(context.user_data['settings_photos']) >= 10:
            await update.message.reply_text(
                "‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ (10)\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è",
                reply_markup=ReplyKeyboardMarkup([["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]], resize_keyboard=True)
            )
            return FormStates.SETTINGS
            
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ
        file_id = update.message.photo[-1].file_id
        context.user_data['settings_photos'].append(file_id)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—É
        await update.message.reply_text(
            f"‚úÖ –°–∫—Ä—ñ–Ω—à–æ—Ç –¥–æ–¥–∞–Ω–æ ({len(context.user_data['settings_photos'])}/10)\n"
            "–ú–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'",
            reply_markup=ReplyKeyboardMarkup([["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]], resize_keyboard=True)
        )
        return FormStates.SETTINGS
        
    elif update.message.text in ["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]:
        # –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        form_data = context.user_data['form_data']
        summary = await format_service_request(form_data)
        
        await update.message.reply_text(
            f"üìã –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏:\n\n{summary}",
            reply_markup=ReplyKeyboardMarkup([["‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True)
        )
        return FormStates.CONFIRM
        
    # –Ø–∫—â–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —Å—Ç–∞–Ω—ñ
    if not context.user_data.get('settings_photos'):
        context.user_data['settings_photos'] = []
        await update.message.reply_text(
            "üì∏ –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Bambu Studio.\n"
            "–ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'\n"
            "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', —è–∫—â–æ –Ω–µ –º–∞—î—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤",
            reply_markup=ReplyKeyboardMarkup([["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]], resize_keyboard=True)
        )
    
    return FormStates.SETTINGS

async def process_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –§—ñ–Ω–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ —ñ–Ω–∂–µ–Ω–µ—Ä—É.
    """
    try:
        if update.message.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞—è–≤–∫—É —ñ–Ω–∂–µ–Ω–µ—Ä—É
            form_data = context.user_data['form_data']
            await send_to_engineer(update, await format_service_request(form_data))
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º–∏
            bot = context.bot
            if context.user_data.get('photos'):
                await bot.send_message(
                    ENGINEER_TELEGRAM_ID,
                    "üì∏ –§–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º–∏:"
                )
                for photo_id in context.user_data['photos']:
                    try:
                        await bot.send_photo(ENGINEER_TELEGRAM_ID, photo_id)
                    except Exception as e:
                        logger.error(f"Error sending problem photo: {str(e)}")
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            if context.user_data.get('settings_photos'):
                await bot.send_message(
                    ENGINEER_TELEGRAM_ID,
                    "üîß –°–∫—Ä—ñ–Ω—à–æ—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:"
                )
                for photo_id in context.user_data['settings_photos']:
                    try:
                        await bot.send_photo(ENGINEER_TELEGRAM_ID, photo_id)
                    except Exception as e:
                        logger.error(f"Error sending settings photo: {str(e)}")
            
            try:
                await update.message.reply_text(
                    "‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à—É –∑–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ.\n"
                    "–ù–∞—à —ñ–Ω–∂–µ–Ω–µ—Ä —Ä–æ–∑–≥–ª—è–Ω–µ —ó—ó –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
                    reply_markup=get_start_keyboard()
                )
            except Exception as e:
                logger.error(f"Error sending final message: {str(e)}")
                await update.message.reply_text(
                    "‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à—É –∑–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ.\n"
                    "–ù–∞—à —ñ–Ω–∂–µ–Ω–µ—Ä —Ä–æ–∑–≥–ª—è–Ω–µ —ó—ó –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
                )
            
            return ConversationHandler.END
            
    except Exception as e:
        logger.error(f"Error in process_confirmation: {str(e)}")
        await update.message.reply_text(
            "‚úÖ –í–∞—à—É –∑–∞—è–≤–∫—É –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞.\n"
            "–ù–∞—à —ñ–Ω–∂–µ–Ω–µ—Ä –≤—Å–µ –æ–¥–Ω–æ –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–∞ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏."
        )
        return ConversationHandler.END